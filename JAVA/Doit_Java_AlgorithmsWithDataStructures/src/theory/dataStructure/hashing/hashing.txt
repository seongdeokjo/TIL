해시법 : 검색과 더불어 데이터 의 추가와 삭제도 효율적으로 수행할 수 있는 방법
	   데이터를 저장할 위치(인덱스)를 간단한 연산으로 구하는 것

*/ 해시와 해시 함수에 대하여
	만약 충돌이 전혀 발생하지 않는다면 해시 함수로 인덱스를 찾는 것만으로 검색,추가,삭제가 거의 완료되므로 그 시간 복잡도는 어느 것이나 O(1)이 된다.
	해시 테이블을 크게 하면 충돌 발생을 억제할 수 있지만 다른 한편으로 메모리를 쓸데없이 많이 차지한다. 즉, 시간과 공간의 절충(trade-off)이라는 문제가 항상 따라다닌다.
	
	충돌을 피하기 위해 해시 함수는 해시 테이블 크기 이하의 정수를 되도록 한쪽으로 치우치지 않고,고르게 만들어 내야한다. 그래서 해시 테이블의 크기는 '소수'가 좋다고 알려져 있다.
	키 값이 정수가 아닌 경우 해시 값을 구할 때는 좀 더 신경을 써 방법을 모색해야 한다. 예컨대 실수 키 값에 대해 비트 연산(bitwise operation)을 하는 방법, 문자열 키 값에 대해
	각 문자 코드에 곱셈과 덧셈을 하는 방법이 있다.
*/

해시 값(hash value) : 배열의 키 값(각 요소의 값)을 배열의 요솟수로 나눈 나머지로 정리한 값, 데이터에 접근할 때 사용
해시 테이블(hash table) : 해시 값이 인덱스가 되도록 원래의 키 값을 저장한 배열이다.	   
해시 함수(hsah function) : 키 값을 가지고 해시 값을 만드는 과정
						가능하면 해시 값이 치우치지 않도록 고르게 분포된 값을 만들어야 한다.
버킷(bucket) : 해시 테이블의 각 요소
충돌(collision) : 저장할 버킷이 중복되는 현상
	대처 : 1. 체인법 : 같은 해시 값을 갖는 요소를 연결 리스트로 관리한다.
		  2. 오픈 주소법 : 빈 버킷을 찾을 때까지 해시를 반복한다.
- 체인법(chaining) : 같은 해시 값을 갖는 데이터를 쇠사슬(chain) 모양으로 연결 리스트에서 연결하는 방법으로, 오픈 해시법(open hashing) 이라고도 한다.
- 오픈 주소법(open addressing) : 충돌이 발생했을 때 재해시(rehashing)를 수행하여 비어 있는 버킷을 찾아내는 방법, 닫힌 해시법(closed hashing)이라고도 한다.
							  빈 버킷을 만날 때까지 재해시를 여러 번 반복하므로 선형 탐사법(linear probing)이라고도 한다. 		  
	   