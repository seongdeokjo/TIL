리스트 : 데이터를 순서대로 나열한(줄지어 늘어놓은) 자료구조이다.
	리스트의 데이터 : 노드(node) 또는 요소(element)라고하고, 각각의 노드는 데이터와 다음 노드를 가리키는 포인터를 가지고 있다.
	처음과 끝에 있는 노드는 특별히 각각 머리 노드(head node), 꼬리 노드(tail node)라고 한다.
	또한 하나의 노드에 대해 바로 앞에 있는 노드를 앞쪽 노드(predecessor node), 바로 뒤에 있는 노드를 다음 노드(successor node)라고 한다.

1. 선형 리스트(linear list) : 가장 단수한 구조를 이루고 있는 리스트, 연속적인 기억 장소에 저장된 리스트이다.
			 	- 다음 노드 꺼내기 : 1만큼 큰 인덱스를 갖는 요소에 접근한다.
				- 노드의 삽입과 삭제 : 삽입 요소 다음의 모든 요소를 하나씩 뒤로 밀어야 하며, 삭제하는 경우도 모든 요소를 뒤로 밀거나 앞으로 당겨야한다.
				- 선형 리스트가 갖는 문제 : 1. 쌓이는 데이터의 크기를 미리 알아야 한다.
									  2. 데이터의 삽입, 삭제에 따라 데이터를 모두 옮겨야 하기 때문에 효율이 좋지 않다.	

2. 연결 리스트(linked list) : 자료들을 임의의 기억공간에 기억시키고, 자료 항목의 순서에 따라 노드의 포인터 부분을 이용하여 서로 연결시킨 자료구조이다.
				- 포인터로 연결 리스트 만들기 : 연결 리스트에 데이터를 삽입할 때 노드용 객체를 만들고, 삭제할 때 노드용 객체를 없앤다.
										꼬리 노드의 뒤쪽 포인터 값은 널(null)을 참조한다.
				- 노드 스캔의 성립 조건 : 1. 검색 조건을 만조하는 노드를 찾지 못하고 꼬리 노드를 지나가기 직전인 경우
									2. 검색 조건을 만족하는 노드를 찾은 경우
				- 커서로 연결 리스트 만들기 : 각 노드를 배열 안의 요소에 저장하고 그 요소를 이용해 연결 리스트를 구현하는 방식이다.
									   데이터 수의 최댓값을 미리 계산하여 모든 노드를 저장하기에 충분한 크기의 배열을 만들어야 한다.
									   배열의 커서에 해당하는 값은 다음 노드에 대한 포인터가 아니라 다음 노드가 들어 있는 요소의 인덱스에 대한 값이다.
									   포인터 역활을 하는 인덱스를 커서(cursor)라고 한다.
									   배열 안에서의 물리적인 위치 관계와 연결 리스트의 논리적인 순서 관계가 같은 것은 아니다.
									   인덱스 n인 요소에 들어 있는 노드를 'n번째 레코드'
									   														  