트리 : 데이터 사이의 계층 관계를 나타내는 자료 구조

트리 관련 용어 : 
 노드(node) : 트리를 구성하는 요소, 각각의 노드는 가지를 통해 다른 노드와 연결되어 있다. 
 	- 간선[가지](edge) : 정점에서 다른 정점으로 가는 경로, 링크(Link, 다른 노드의 위치 정보)
	- 루트(root)      : 트리의 가장 윗부분에 위치하는 노드이다.
					   하나의 트리에는 하나의 루트가 있다.
	- 리프(leaf)      : 트리의 가장 아랫부분에 위치하는 노드이다. 
					   이 때 '가장 아래에 위치한다'라는 말은 더 이상 뻗어나갈 수 없는 마지막에 노드가 위치한다는 의미이다.
				       *끝 노드(terminal node) or 바깥 노드(external node)라고도 한다. 
	- 안쪽 노드         : 루트를 포함하여 리프를 제외한 노드이다. 
				       * 끝이 아닌 노드(non-terminal node)라고도 한다.
	- 자식(child)      : 어떤 노드로부터 가지로 연결된 아래쪽 노드이다.
				       노드는 자식을 여러개 가질 수 있다. 
					   *리프는 자식을 가질 수 없다.
	- 부모(parent)     : 어떤 노드에서 가지로 연결된 위쪽 노드이다. 
					   노드는 1개의 부모를 가진다.
					   *루트는 부모를 가질 수 없다.
	- 형제(sibling)    : 같은 부모를 가지는 노드이다.
	- 조상(ancestor)   : 어떤 노드에서 가지로 연결된 위쪽 노드 모두를 조상이라고 한다.
	- 자손(descendant) : 어떤 노드에서 가지로 연결된 아래쪽 모두를 자손이라고 한다.
	- 레벨(level)      : 루트로 부터 얼마나 떨어져 있는지에 대한 값
						루트의 레벌은 0이고 루트로부터 가지가 하나씩 아래로 뻗어나갈 때마다 레벨이 1씩 늘어난다.
	- 차수(degree)	  : 노드가 갖는 자식의 수를 차수라고 한다.
						*모든 노드의 차수가 n 이하인 트리를 n진 트리라고 한다. 					 				
	- 높이(height)	  : 루트로부터 가장 멀리 떨어진 리프까지의 거리(리프 레벨의 최댓값)를 높이라고 한다.
	- 서브트리(subtree)  : 트리 안에서 다시 어떤 노드를 루트로 정하고 그 자손으로 이루어진 트리이다.
	- 널 트리(null-tree) : 노드, 가지가 없는 트리이다. 				

순서 트리와 무순서 트리
	- 순서 트리(ordered tree)    : 형제 노드의 순서를 따진다.
	- 무순서 트리(unordered tree) : 형제 노드의 순서를 따지지 않는다.

순서 트리 탐색 :  
1.너비 우선 탐색 (breadth-first-search) : 
	- 낮은 레벨에서 시작해 왼쪽 -> 오른쪽 방향으로 검색하고,
	  한 레벨에서의 검색이 끝나면 다음 레벨로 내려간다.
2.깊이 우선 탐색 (depth-first-saerch)   : 
    - 리프까지 내려가면서 검색하는 것을 우선순위로 하는 탐색 방법이다.									  						 				 			  
      리프에 도달해 더 이상 검색을 진행할 곳이 없는 경우에는 부모에게 돌아간다. 그런 다음 다시 자식 노드로 내려간다.
	
2-1. 깊이 우선 탐색의 진행 방법 : 전위 순회, 중위 순회, 후위 순회 / 노드를 지나가는 최댓값은 3회
	ex)						A
						  /	 \
					 	 B    C
						/ \	 / \
					   D  E  F  G
					  /  /\ /\
					 H  I J K L 	
	1.전위 순회(preorder) : 노드 방문 -> 왼쪽 자식 -> 오른쪽 자식 
			  - 방문 순서 : A -> B-> D -> H -> E -> I -> J -> C -> F -> K -> L -> G	
	
	2.중위 순회(inorder) : 왼쪽 자식 -> 노드 방문 -> 오른쪽 자식
			  - 방문 순서 : H -> D -> B -> I -> E -> J -> A -> K -> F -> L -> C -> G 
			  
	3. 후위 순회(postorder) : 왼쪽 자식 -> 오른쪽 자식 -> (돌아와)노드 방문
			  - 방문 순서 : H -> D -> I > J -> E -> B -> K -> L -> F -> G -> C -> A		 
			  

이진 트리와 이진 검색 트리 :
1. 이진 트리(binary tree) : 노드가 왼쪽 자식과 오른쪽 자식을 갖는 트리이다.
						 *이 때 각 노드의 자식은 2명 이하만 유지해야 한다.

1.1 완전 이진 트리(complete binary tree) : 루트부터 노드가 채워져 있으면서 같은 레벨에서는 왼쪽에서 오른쪽으로 노드가 채워져 있는 이진트리를 완전이진트리라고 한다.
									   1. 마지막 레벨을 제외한 레벨은 노드를 가득 채운다.
									   2. 마지막 레벨은 왼쪽부터 오른쪽 방향으로 노드를 채우되 반드시 끝까지 채울 필요는 없다.
									   높이가 k인 완전이진트리가 가질 수 있는 노드의 최댓값은 2^k+1 -1 개이다.
									   n 개의 노드를 저장할 수 있는 완전이진트리의 높이는 log n이다.

2. 이진 검색 트리(binary search tree) : 이진 트리가 다음 조건을 만족하면 된다.
	 1. 어떤 노드 n을 기준으로 왼쪽 서브 트리 노드의 모든 키 값은 노드 n의 키 값보다 작아야 한다.
	 2. 오른쪽 서브 트리 노드의 키 값은 노드 n의 키 값보다 커야 한다.
	 3. 같은 키 값을 갖는 노드는 없다.
	 
	 특징 : 중위 순회를 하면 키 값의 오름차순으로 노드를 얻을 수 있다.
	 	   구조가 단순하다.
	 	   이진검색과 비슷한 방식으로 검색이 가능하다.
	 	   노드의 삽입이 쉽다. 									   						 			   